var ThreeSixty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ThreeSixty = (function() {
  ThreeSixty.prototype.Scale = 10;

  ThreeSixty.prototype.MaxRotation = Math.PI / 4;

  ThreeSixty.prototype.LEFT = 'left';

  ThreeSixty.prototype.RIGHT = 'right';

  ThreeSixty.prototype.UP = 'up';

  ThreeSixty.prototype.DOWN = 'down';

  ThreeSixty.prototype.IN = 'in';

  ThreeSixty.prototype.OUT = 'out';

  ThreeSixty.prototype.RESET = 'reset';

  ThreeSixty.prototype.CAMERA_MODE = 'camera_mode';

  ThreeSixty.prototype.ARROW_MODE = 'arrow_mode';

  function ThreeSixty(box, urls) {
    this.render = bind(this.render, this);
    this.shouldRerender = bind(this.shouldRerender, this);
    this.processMovements = bind(this.processMovements, this);
    this.quadraticEaseInEaseOut = bind(this.quadraticEaseInEaseOut, this);
    this.processPanTo = bind(this.processPanTo, this);
    this.startRender = bind(this.startRender, this);
    this.clampRotation = bind(this.clampRotation, this);
    this.clampPosition = bind(this.clampPosition, this);
    this.move = bind(this.move, this);
    this.getDirection = bind(this.getDirection, this);
    this.beginKeyPress = bind(this.beginKeyPress, this);
    this.endKeyPress = bind(this.endKeyPress, this);
    this.eventMouseUp = bind(this.eventMouseUp, this);
    this.eventMouseMove = bind(this.eventMouseMove, this);
    this.eventMouseDown = bind(this.eventMouseDown, this);
    this.eventOnKeyUp = bind(this.eventOnKeyUp, this);
    this.eventOnKeyDown = bind(this.eventOnKeyDown, this);
    this.eventDoDomControl = bind(this.eventDoDomControl, this);
    this.initControls = bind(this.initControls, this);
    this.initRenderer = bind(this.initRenderer, this);
    this.initObjects = bind(this.initObjects, this);
    this.initScene = bind(this.initScene, this);
    this.urls = urls;
    this.box = box;
    this.directions = {};
    this.mouse = {
      active: false,
      panning: false,
      speed: {
        x: 0,
        y: 0,
        z: 0
      }
    };
    this.panTo = {
      active: false,
      time: {
        start: 0,
        end: 0
      },
      from: {
        rotation: {
          x: 0,
          y: 0,
          z: 0
        }
      },
      to: {
        rotation: {
          x: 0,
          y: 0,
          z: 0
        }
      }
    };
    this.isRendering = false;
    this.compassNeedle = document.getElementById('compass-direction-icon');
  }

  ThreeSixty.prototype.start = function() {
    this.initScene((function(_this) {
      return function() {
        _this.initObjects(function() {
          _this.initRenderer(function() {
            _this.initControls(function() {
              _this.doRender();
            });
          });
        });
      };
    })(this));
  };

  ThreeSixty.prototype.initScene = function(cb) {
    this.scene = new THREE.Scene;
    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, ThreeSixty.prototype.Scale * 10);
    this.parentObject = new THREE.Object3D();
    this.parentObject.rotation.order = 'YXZ';
    this.scene.add(this.parentObject);
    this.parentObject.add(this.camera);
    this.selectedObject = this.camera;
    this.camera.rotation.order = 'YXZ';
    window.addEventListener('resize', ((function(_this) {
      return function() {
        _this.camera.aspect = window.innerWidth / window.innerHeight;
        _this.camera.updateProjectionMatrix();
        _this.renderer.setSize(window.innerWidth, window.innerHeight);
        _this.doRender();
      };
    })(this)), false);
    return cb();
  };

  ThreeSixty.prototype.initObjects = function(cb) {
    return THREE.ImageUtils.loadTextureCube(this.urls, null, (function(_this) {
      return function(texture) {
        var addBox, material, meshGeometry, shader, skyBox, uniforms;
        shader = THREE.ShaderLib['cube'];
        uniforms = THREE.UniformsUtils.clone(shader.uniforms);
        uniforms['tCube'].value = texture;
        material = new THREE.ShaderMaterial({
          fragmentShader: shader.fragmentShader,
          vertexShader: shader.vertexShader,
          uniforms: uniforms,
          side: THREE.BackSide
        });
        meshGeometry = new THREE.SphereGeometry(ThreeSixty.prototype.Scale, 32, 32);
        skyBox = new THREE.Mesh(meshGeometry, material);
        addBox = (function() {
          var cube, d, geometry;
          d = Math.sqrt(2 * ThreeSixty.prototype.Scale * ThreeSixty.prototype.Scale);
          geometry = new THREE.BoxGeometry(d, d, d);
          material = new THREE.MeshBasicMaterial({
            color: 0x00ff00
          });
          material.wireframe = true;
          cube = new THREE.Mesh(geometry, material);
          cube.position.x = 0;
          cube.position.y = 0;
          cube.position.z = 0;
          return _this.scene.add(cube);
        });
        _this.scene.add(skyBox);
        return cb();
      };
    })(this));
  };

  ThreeSixty.prototype.initRenderer = function(cb) {
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.box.appendChild(this.renderer.domElement);
    return cb();
  };

  ThreeSixty.prototype.initControls = function(cb) {
    var fn, i, len, mapControl, mapControls;
    document.addEventListener('keydown', this.eventOnKeyDown, false);
    document.addEventListener('keyup', this.eventOnKeyUp, false);
    this.renderer.domElement.addEventListener('mousedown', this.eventMouseDown, false);
    this.renderer.domElement.addEventListener('mousemove', this.eventMouseMove, false);
    this.renderer.domElement.addEventListener('mouseup', this.eventMouseUp, false);
    this.renderer.domElement.addEventListener('mouseout', this.eventMouseUp, false);
    mapControls = document.querySelectorAll('[data-map-control]');
    fn = (function(_this) {
      return function(mapControl) {
        var direction;
        direction = mapControl.dataset.mapControl;
        return mapControl.addEventListener('click', function(e) {
          e.preventDefault();
          _this.eventDoDomControl(direction);
        });
      };
    })(this);
    for (i = 0, len = mapControls.length; i < len; i++) {
      mapControl = mapControls[i];
      fn(mapControl);
    }
    return cb();
  };

  ThreeSixty.prototype.eventDoDomControl = function(operation) {
    var fromRotation;
    this.panTo.time.start = (new Date()).getTime();
    this.panTo.time.end = this.panTo.time.start + 700;
    fromRotation = this.parentObject.rotation.clone();
    this.panTo.from.rotation = fromRotation;
    this.panTo.to.rotation = fromRotation.clone();
    this.panTo.from.position = this.selectedObject.position.z;
    this.panTo.to.position = this.panTo.from.position;
    switch (operation) {
      case ThreeSixty.prototype.LEFT:
        this.panTo.to.rotation.y = this.panTo.from.rotation.y + Math.PI / 2;
        break;
      case ThreeSixty.prototype.RIGHT:
        this.panTo.to.rotation.y = this.panTo.from.rotation.y - Math.PI / 2;
        break;
      case ThreeSixty.prototype.IN:
        this.panTo.to.position -= 1;
        break;
      case ThreeSixty.prototype.OUT:
        this.panTo.to.position += 1;
        break;
      case ThreeSixty.prototype.RESET:
        this.parentObject.rotation.y = this.parentObject.rotation.y % (2 * Math.PI);
        this.panTo.to.rotation.x = 0;
        this.panTo.to.rotation.y = 0;
        this.panTo.to.position = 0;
        break;
      default:
        console.log("can't do " + operation);
        return;
    }
    this.panTo.to.position = this.clampPosition(this.panTo.to.position);
    this.clampRotation(this.panTo.to);
    this.panTo.active = true;
    this.startRender();
  };

  ThreeSixty.prototype.eventOnKeyDown = function(e) {
    var dir;
    dir = this.getDirection(e.keyCode);
    if (dir != null) {
      e.preventDefault();
      this.beginKeyPress(dir);
    }
  };

  ThreeSixty.prototype.eventOnKeyUp = function(e) {
    var dir;
    dir = this.getDirection(e.keyCode);
    if (dir != null) {
      this.endKeyPress(dir);
    }
  };

  ThreeSixty.prototype.eventMouseDown = function() {};

  ThreeSixty.prototype.eventMouseMove = function(e) {};

  ThreeSixty.prototype.eventMouseUp = function() {};

  ThreeSixty.prototype.endKeyPress = function(direction) {
    if (this.directions[direction]) {
      return this.directions[direction] = false;
    }
  };

  ThreeSixty.prototype.beginKeyPress = function(direction) {
    if (this.directions[direction]) {
      return;
    }
    this.directions[direction] = true;
    return this.startRender();
  };

  ThreeSixty.prototype.getDirection = function(key) {
    switch (key) {
      case 37:
      case 65:
        return ThreeSixty.prototype.LEFT;
      case 38:
      case 87:
        return ThreeSixty.prototype.UP;
      case 39:
      case 68:
        return ThreeSixty.prototype.RIGHT;
      case 40:
      case 83:
        return ThreeSixty.prototype.DOWN;
      case 187:
        return ThreeSixty.prototype.IN;
      case 189:
        return ThreeSixty.prototype.OUT;
      case 67:
        return ThreeSixty.prototype.CAMERA_MODE;
      case 86:
        return ThreeSixty.prototype.ARROW_MODE;
      default:
        console.error("direction not known: " + key);
        return false;
    }
  };

  ThreeSixty.prototype.move = function(direction) {
    switch (direction) {
      case ThreeSixty.prototype.LEFT:
        this.parentObject.rotation.y += Math.PI / 200;
        break;
      case ThreeSixty.prototype.UP:
        this.parentObject.rotation.x += Math.PI / 200;
        break;
      case ThreeSixty.prototype.RIGHT:
        this.parentObject.rotation.y -= Math.PI / 200;
        break;
      case ThreeSixty.prototype.DOWN:
        this.parentObject.rotation.x -= Math.PI / 200;
        break;
      case ThreeSixty.prototype.IN:
        this.selectedObject.position.z += ThreeSixty.prototype.Scale / -100;
        break;
      case ThreeSixty.prototype.OUT:
        this.selectedObject.position.z += ThreeSixty.prototype.Scale / 100;
        break;
      default:
        null;
    }
    this.selectedObject.position.z = this.clampPosition(this.selectedObject.position.z);
    this.clampRotation(this.parentObject);
  };

  ThreeSixty.prototype.clampPosition = function(position) {
    if (position < ThreeSixty.prototype.Scale * -0.4) {
      return ThreeSixty.prototype.Scale * -0.4;
    } else if (position > 0) {
      return 0;
    } else {
      return position;
    }
  };

  ThreeSixty.prototype.clampRotation = function(object) {
    if (object.rotation.x > ThreeSixty.prototype.MaxRotation) {
      object.rotation.x = ThreeSixty.prototype.MaxRotation;
    }
    if (object.rotation.x < -ThreeSixty.prototype.MaxRotation) {
      object.rotation.x = -ThreeSixty.prototype.MaxRotation;
    }
  };

  ThreeSixty.prototype.startRender = function() {
    if (!this.isRendering) {
      this.isRendering = true;
      this.render();
    }
  };

  ThreeSixty.prototype.processPanTo = function() {
    var Tc;
    Tc = (new Date()).getTime();
    if (this.parentObject.rotation.y !== this.panTo.to.rotation.y) {
      this.parentObject.rotation.y = this.quadraticEaseInEaseOut(Tc, this.panTo.to.rotation.y, this.panTo.from.rotation.y);
    }
    if (this.parentObject.rotation.x !== this.panTo.to.rotation.x) {
      this.parentObject.rotation.x = this.quadraticEaseInEaseOut(Tc, this.panTo.to.rotation.x, this.panTo.from.rotation.x);
    }
    if (this.selectedObject.position.z !== this.panTo.to.position) {
      this.selectedObject.position.z = this.quadraticEaseInEaseOut(Tc, this.panTo.to.position, this.panTo.from.position);
    }
    if (Tc >= this.panTo.time.end) {
      this.parentObject.rotation.y = this.panTo.to.rotation.y;
      this.parentObject.rotation.x = this.panTo.to.rotation.x;
      this.selectedObject.position.z = this.panTo.to.position;
      this.panTo.active = false;
    }
  };

  ThreeSixty.prototype.quadraticEaseInEaseOut = function(Tc, G, B) {
    var t;
    t = 2 * (Tc - this.panTo.time.start) / (this.panTo.time.end - this.panTo.time.start);
    if (t < 1) {
      return ((G - B) / 2) * t * t + B;
    } else {
      t = t - 1;
      return ((B - G) / 2) * (t * (t - 2) - 1) + B;
    }
  };

  ThreeSixty.prototype.processMovements = function() {
    var rotationString;
    _.map(this.directions, (function(_this) {
      return function(enabled, direction) {
        if (enabled) {
          return _this.move(direction);
        }
      };
    })(this));
    if (this.panTo.active) {
      this.processPanTo();
    }
    rotationString = "rotate(" + this.parentObject.rotation.y + "rad)";
    this.compassNeedle.style.webkitTransform = rotationString;
    this.compassNeedle.style.transform = rotationString;
  };

  ThreeSixty.prototype.shouldRerender = function() {
    return this.mouse.panning || _.some(this.directions) || this.panTo.active;
  };

  ThreeSixty.prototype.doRender = function() {
    return this.renderer.render(this.scene, this.camera);
  };

  ThreeSixty.prototype.render = function() {
    if (this.shouldRerender()) {
      requestAnimationFrame(ThreeSixty.prototype.render.bind(this));
      this.processMovements();
      this.doRender();
    } else {
      this.isRendering = false;
    }
  };

  return ThreeSixty;

})();

document.addEventListener('DOMContentLoaded', function() {
  var ts;
  ts = new ThreeSixty(document.body, ['images/yokohama/pos-x.jpg', 'images/yokohama/neg-x.jpg', 'images/yokohama/pos-y.jpg', 'images/yokohama/neg-y.jpg', 'images/yokohama/pos-z.jpg', 'images/yokohama/neg-z.jpg']);
  ts.start();
});

//# sourceMappingURL=data:application/json;base64,