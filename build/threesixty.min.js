var ThreeSixty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ThreeSixty = (function() {
  ThreeSixty.prototype.Scale = 10;

  ThreeSixty.prototype.MouseWheelScale = -250;

  ThreeSixty.prototype.MaxRotation = Math.PI / 9.5;

  ThreeSixty.prototype.LEFT = 'left';

  ThreeSixty.prototype.RIGHT = 'right';

  ThreeSixty.prototype.UP = 'up';

  ThreeSixty.prototype.DOWN = 'down';

  ThreeSixty.prototype.IN = 'in';

  ThreeSixty.prototype.OUT = 'out';

  ThreeSixty.prototype.RESET = 'reset';

  function ThreeSixty(box, urls) {
    this.render = bind(this.render, this);
    this.shouldRerender = bind(this.shouldRerender, this);
    this.processMovements = bind(this.processMovements, this);
    this.quadraticEaseInEaseOut = bind(this.quadraticEaseInEaseOut, this);
    this.processPanTo = bind(this.processPanTo, this);
    this.startRender = bind(this.startRender, this);
    this.clampRotation = bind(this.clampRotation, this);
    this.clampPosition = bind(this.clampPosition, this);
    this.move = bind(this.move, this);
    this.getDirection = bind(this.getDirection, this);
    this.beginKeyPress = bind(this.beginKeyPress, this);
    this.endKeyPress = bind(this.endKeyPress, this);
    this.calculateRaycastAngle = bind(this.calculateRaycastAngle, this);
    this.updateMouseRaycast = bind(this.updateMouseRaycast, this);
    this.eventMouseUp = bind(this.eventMouseUp, this);
    this.eventMouseMove = bind(this.eventMouseMove, this);
    this.eventMouseDown = bind(this.eventMouseDown, this);
    this.eventScroll = bind(this.eventScroll, this);
    this.eventOnKeyUp = bind(this.eventOnKeyUp, this);
    this.eventOnKeyDown = bind(this.eventOnKeyDown, this);
    this.eventDoDomControl = bind(this.eventDoDomControl, this);
    this.initControls = bind(this.initControls, this);
    this.initRenderer = bind(this.initRenderer, this);
    this.initObjects = bind(this.initObjects, this);
    this.initScene = bind(this.initScene, this);
    this.urls = urls;
    this.box = box;
    this.directions = {};
    this.grab = {
      active: false,
      position: new THREE.Vector2(),
      raycast: {
        old: new THREE.Vector3(),
        "new": new THREE.Vector3()
      },
      queue: []
    };
    this.panTo = {
      active: false,
      time: {
        start: 0,
        end: 0
      },
      from: {
        rotation: {
          x: 0,
          y: 0,
          z: 0
        }
      },
      to: {
        rotation: {
          x: 0,
          y: 0,
          z: 0
        }
      }
    };
    this.isRendering = false;
    this.renderOnce = false;
    this.compassNeedle = document.getElementById('compass-direction-icon');
  }

  ThreeSixty.prototype.start = function() {
    this.initScene((function(_this) {
      return function() {
        _this.initObjects(function() {
          _this.initRenderer(function() {
            _this.initControls(function() {
              _this.doRender();
            });
          });
        });
      };
    })(this));
  };

  ThreeSixty.prototype.initScene = function(cb) {
    this.scene = new THREE.Scene;
    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, ThreeSixty.prototype.Scale * 10);
    this.parentObject = new THREE.Object3D();
    this.parentObject.rotation.order = 'YXZ';
    this.scene.add(this.parentObject);
    this.parentObject.add(this.camera);
    this.raycaster = new THREE.Raycaster();
    this.camera.rotation.order = 'YXZ';
    window.addEventListener('resize', ((function(_this) {
      return function() {
        _this.camera.aspect = window.innerWidth / window.innerHeight;
        _this.camera.updateProjectionMatrix();
        _this.renderer.setSize(window.innerWidth, window.innerHeight);
        _this.doRender();
      };
    })(this)), false);
    return cb();
  };

  ThreeSixty.prototype.initObjects = function(cb) {
    return THREE.ImageUtils.loadTextureCube(this.urls, null, (function(_this) {
      return function(texture) {
        var material, meshGeometry, shader, uniforms;
        shader = THREE.ShaderLib['cube'];
        uniforms = THREE.UniformsUtils.clone(shader.uniforms);
        uniforms['tCube'].value = texture;
        material = new THREE.ShaderMaterial({
          fragmentShader: shader.fragmentShader,
          vertexShader: shader.vertexShader,
          uniforms: uniforms,
          side: THREE.BackSide
        });
        meshGeometry = new THREE.SphereGeometry(ThreeSixty.prototype.Scale, 32, 32);
        _this.skyBox = new THREE.Mesh(meshGeometry, material);
        _this.scene.add(_this.skyBox);
        return cb();
      };
    })(this));
  };

  ThreeSixty.prototype.initRenderer = function(cb) {
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.box.appendChild(this.renderer.domElement);
    return cb();
  };

  ThreeSixty.prototype.initControls = function(cb) {
    var fn, i, len, mapControl, mapControls;
    document.addEventListener('keydown', this.eventOnKeyDown, false);
    document.addEventListener('keyup', this.eventOnKeyUp, false);
    this.renderer.domElement.addEventListener('mousedown', this.eventMouseDown, false);
    this.renderer.domElement.addEventListener('mousemove', this.eventMouseMove, false);
    this.renderer.domElement.addEventListener('mouseup', this.eventMouseUp, false);
    this.renderer.domElement.addEventListener('mouseout', this.eventMouseUp, false);
    document.addEventListener('mousewheel', this.eventScroll, false);
    mapControls = document.querySelectorAll('[data-map-control]');
    fn = (function(_this) {
      return function(mapControl) {
        var direction;
        direction = mapControl.dataset.mapControl;
        return mapControl.addEventListener('click', function(e) {
          e.preventDefault();
          _this.eventDoDomControl(direction);
        });
      };
    })(this);
    for (i = 0, len = mapControls.length; i < len; i++) {
      mapControl = mapControls[i];
      fn(mapControl);
    }
    return cb();
  };

  ThreeSixty.prototype.eventDoDomControl = function(operation) {
    var fromRotation;
    this.panTo.time.start = (new Date()).getTime();
    this.panTo.time.end = this.panTo.time.start + 700;
    fromRotation = this.parentObject.rotation.clone();
    this.panTo.from.rotation = fromRotation;
    this.panTo.to.rotation = fromRotation.clone();
    this.panTo.from.position = this.camera.position.z;
    this.panTo.to.position = this.panTo.from.position;
    switch (operation) {
      case ThreeSixty.prototype.LEFT:
        this.panTo.to.rotation.y = this.panTo.from.rotation.y + Math.PI / 2;
        break;
      case ThreeSixty.prototype.RIGHT:
        this.panTo.to.rotation.y = this.panTo.from.rotation.y - Math.PI / 2;
        break;
      case ThreeSixty.prototype.IN:
        this.panTo.to.position -= 1;
        break;
      case ThreeSixty.prototype.OUT:
        this.panTo.to.position += 1;
        break;
      case ThreeSixty.prototype.RESET:
        this.parentObject.rotation.y = this.parentObject.rotation.y % (2 * Math.PI);
        this.panTo.to.rotation.x = 0;
        this.panTo.to.rotation.y = 0;
        this.panTo.to.position = 0;
        break;
      default:
        console.log("can't do " + operation);
        return;
    }
    this.panTo.to.position = this.clampPosition(this.panTo.to.position);
    this.clampRotation(this.panTo.to);
    this.panTo.active = true;
    this.startRender();
  };

  ThreeSixty.prototype.eventOnKeyDown = function(e) {
    var dir;
    dir = this.getDirection(e.keyCode);
    if (dir != null) {
      e.preventDefault();
      this.beginKeyPress(dir);
    }
  };

  ThreeSixty.prototype.eventOnKeyUp = function(e) {
    var dir;
    dir = this.getDirection(e.keyCode);
    if (dir != null) {
      this.endKeyPress(dir);
    }
  };

  ThreeSixty.prototype.eventScroll = function(e) {
    this.camera.position.z += e.wheelDelta / ThreeSixty.prototype.MouseWheelScale;
    this.camera.position.z = this.clampPosition(this.camera.position.z);
    this.renderOnce = true;
    this.startRender();
    e.preventDefault();
    return false;
  };

  ThreeSixty.prototype.eventMouseDown = function(e) {
    this.grab.active = true;
    this.grab.position.x = (e.clientX / window.innerWidth) * 2 - 1;
    this.grab.position.y = -(e.clientY / window.innerHeight) * 2 + 1;
    this.updateMouseRaycast();
    this.grab.raycast.old = this.grab.raycast["new"];
    this.startRender();
  };

  ThreeSixty.prototype.eventMouseMove = function(e) {
    if (this.grab.active) {
      this.grab.position.x = (e.clientX / window.innerWidth) * 2 - 1;
      this.grab.position.y = -(e.clientY / window.innerHeight) * 2 + 1;
      this.updateMouseRaycast();
      this.calculateRaycastAngle();
    }
  };

  ThreeSixty.prototype.eventMouseUp = function() {
    this.grab.active = false;
  };

  ThreeSixty.prototype.updateMouseRaycast = function() {
    var raycastPoint;
    this.raycaster.setFromCamera(this.grab.position, this.camera);
    raycastPoint = this.raycaster.intersectObject(this.skyBox)[0];
    this.grab.raycast["new"] = raycastPoint.point.normalize();
  };

  ThreeSixty.prototype.calculateRaycastAngle = function() {
    var eulerOrder, oldRot, qRot;
    qRot = new THREE.Quaternion();
    qRot.setFromUnitVectors(this.grab.raycast["new"], this.grab.raycast.old);
    oldRot = new THREE.Quaternion();
    oldRot.setFromEuler(this.parentObject.rotation);
    qRot.multiply(oldRot);
    eulerOrder = this.parentObject.rotation.order;
    this.parentObject.rotation.setFromQuaternion(qRot, eulerOrder);
    this.parentObject.rotation.z = 0;
    this.clampRotation(this.parentObject);
  };

  ThreeSixty.prototype.endKeyPress = function(direction) {
    if (this.directions[direction]) {
      return this.directions[direction] = false;
    }
  };

  ThreeSixty.prototype.beginKeyPress = function(direction) {
    if (this.directions[direction]) {
      return;
    }
    this.directions[direction] = true;
    return this.startRender();
  };

  ThreeSixty.prototype.getDirection = function(key) {
    switch (key) {
      case 37:
      case 65:
        return ThreeSixty.prototype.LEFT;
      case 38:
      case 87:
        return ThreeSixty.prototype.UP;
      case 39:
      case 68:
        return ThreeSixty.prototype.RIGHT;
      case 40:
      case 83:
        return ThreeSixty.prototype.DOWN;
      case 187:
        return ThreeSixty.prototype.IN;
      case 189:
        return ThreeSixty.prototype.OUT;
      default:
        return false;
    }
  };

  ThreeSixty.prototype.move = function(direction) {
    switch (direction) {
      case ThreeSixty.prototype.LEFT:
        this.parentObject.rotation.y += Math.PI / 200;
        break;
      case ThreeSixty.prototype.UP:
        this.parentObject.rotation.x += Math.PI / 200;
        break;
      case ThreeSixty.prototype.RIGHT:
        this.parentObject.rotation.y -= Math.PI / 200;
        break;
      case ThreeSixty.prototype.DOWN:
        this.parentObject.rotation.x -= Math.PI / 200;
        break;
      case ThreeSixty.prototype.IN:
        this.camera.position.z += ThreeSixty.prototype.Scale / -100;
        break;
      case ThreeSixty.prototype.OUT:
        this.camera.position.z += ThreeSixty.prototype.Scale / 100;
        break;
      default:
        null;
    }
    this.camera.position.z = this.clampPosition(this.camera.position.z);
    this.clampRotation(this.parentObject);
  };

  ThreeSixty.prototype.clampPosition = function(position) {
    if (position < ThreeSixty.prototype.Scale * -0.4) {
      return ThreeSixty.prototype.Scale * -0.4;
    } else if (position > 0) {
      return 0;
    } else {
      return position;
    }
  };

  ThreeSixty.prototype.clampRotation = function(object) {
    if (object.rotation.x > ThreeSixty.prototype.MaxRotation) {
      object.rotation.x = ThreeSixty.prototype.MaxRotation;
    }
    if (object.rotation.x < -ThreeSixty.prototype.MaxRotation) {
      object.rotation.x = -ThreeSixty.prototype.MaxRotation;
    }
  };

  ThreeSixty.prototype.startRender = function() {
    if (!this.isRendering) {
      this.isRendering = true;
      this.render();
    }
  };

  ThreeSixty.prototype.processPanTo = function() {
    var Tc;
    Tc = (new Date()).getTime();
    if (this.parentObject.rotation.y !== this.panTo.to.rotation.y) {
      this.parentObject.rotation.y = this.quadraticEaseInEaseOut(Tc, this.panTo.to.rotation.y, this.panTo.from.rotation.y);
    }
    if (this.parentObject.rotation.x !== this.panTo.to.rotation.x) {
      this.parentObject.rotation.x = this.quadraticEaseInEaseOut(Tc, this.panTo.to.rotation.x, this.panTo.from.rotation.x);
    }
    if (this.camera.position.z !== this.panTo.to.position) {
      this.camera.position.z = this.quadraticEaseInEaseOut(Tc, this.panTo.to.position, this.panTo.from.position);
    }
    if (Tc >= this.panTo.time.end) {
      this.parentObject.rotation.y = this.panTo.to.rotation.y;
      this.parentObject.rotation.x = this.panTo.to.rotation.x;
      this.camera.position.z = this.panTo.to.position;
      this.panTo.active = false;
    }
  };

  ThreeSixty.prototype.quadraticEaseInEaseOut = function(Tc, G, B) {
    var t;
    t = 2 * (Tc - this.panTo.time.start) / (this.panTo.time.end - this.panTo.time.start);
    if (t < 1) {
      return ((G - B) / 2) * t * t + B;
    } else {
      t = t - 1;
      return ((B - G) / 2) * (t * (t - 2) - 1) + B;
    }
  };

  ThreeSixty.prototype.processMovements = function() {
    var rotationString;
    _.map(this.directions, (function(_this) {
      return function(enabled, direction) {
        if (enabled) {
          return _this.move(direction);
        }
      };
    })(this));
    if (this.panTo.active) {
      this.processPanTo();
    }
    rotationString = "rotate(" + this.parentObject.rotation.y + "rad)";
    this.compassNeedle.style.webkitTransform = rotationString;
    this.compassNeedle.style.transform = rotationString;
  };

  ThreeSixty.prototype.shouldRerender = function() {
    return this.grab.active || _.some(this.directions) || this.panTo.active || this.renderOnce;
  };

  ThreeSixty.prototype.doRender = function() {
    this.renderer.render(this.scene, this.camera);
    return this.renderOnce = false;
  };

  ThreeSixty.prototype.render = function() {
    if (this.shouldRerender()) {
      requestAnimationFrame(ThreeSixty.prototype.render.bind(this));
      this.processMovements();
      this.doRender();
    } else {
      this.isRendering = false;
    }
  };

  return ThreeSixty;

})();

document.addEventListener('DOMContentLoaded', function() {
  var ts;
  ts = new ThreeSixty(document.body, ['images/yokohama/pos-x.jpg', 'images/yokohama/neg-x.jpg', 'images/yokohama/pos-y.jpg', 'images/yokohama/neg-y.jpg', 'images/yokohama/pos-z.jpg', 'images/yokohama/neg-z.jpg']);
  ts.start();
});

//# sourceMappingURL=data:application/json;base64,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QVYsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCLEVBQXlCLElBQUMsQ0FBQSxNQUExQjtXQUNBLElBQUMsQ0FBQSxVQUFELEdBQWM7RUFITjs7dUJBS1YsTUFBQSxHQUFRLFNBQUE7SUFDTixJQUFHLElBQUMsQ0FBQSxjQUFELENBQUEsQ0FBSDtNQUVFLHFCQUFBLENBQXNCLFVBQVUsQ0FBQSxTQUFFLENBQUEsTUFBTSxDQUFDLElBQW5CLENBQXdCLElBQXhCLENBQXRCO01BR0EsSUFBQyxDQUFBLGdCQUFELENBQUE7TUFHQSxJQUFDLENBQUEsUUFBRCxDQUFBLEVBUkY7S0FBQSxNQUFBO01BWUUsSUFBQyxDQUFBLFdBQUQsR0FBZSxNQVpqQjs7RUFETTs7Ozs7O0FBaUJWLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsU0FBQTtBQUM1QyxNQUFBO0VBQUEsRUFBQSxHQUFTLElBQUEsVUFBQSxDQUFXLFFBQVEsQ0FBQyxJQUFwQixFQUEwQixDQUNqQywyQkFEaUMsRUFFakMsMkJBRmlDLEVBR2pDLDJCQUhpQyxFQUlqQywyQkFKaUMsRUFLakMsMkJBTGlDLEVBTWpDLDJCQU5pQyxDQUExQjtFQVNULEVBQUUsQ0FBQyxLQUFILENBQUE7QUFWNEMsQ0FBOUMiLCJmaWxlIjoidGhyZWVzaXh0eS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBUaHJlZVNpeHR5XG5cbiAgU2NhbGU6IDEwXG4gIE1vdXNlV2hlZWxTY2FsZTogLTI1MFxuXG4gIE1heFJvdGF0aW9uOiBNYXRoLlBJLzkuNVxuXG4gICMgRGlyZWN0aW9uIGNvbnN0YW50c1xuICBMRUZUOiAnbGVmdCdcbiAgUklHSFQ6ICdyaWdodCdcbiAgVVA6ICd1cCdcbiAgRE9XTjogJ2Rvd24nXG4gIElOOiAnaW4nXG4gIE9VVDogJ291dCdcbiAgUkVTRVQ6ICdyZXNldCdcblxuICBjb25zdHJ1Y3RvcjogKGJveCwgdXJscykgLT5cbiAgICBAdXJscyA9IHVybHNcbiAgICBAYm94ID0gYm94XG5cbiAgICBAZGlyZWN0aW9ucyA9IHt9XG5cbiAgICBAZ3JhYiA9XG4gICAgICBhY3RpdmU6IGZhbHNlXG4gICAgICBwb3NpdGlvbjogbmV3IFRIUkVFLlZlY3RvcjIoKVxuICAgICAgcmF5Y2FzdDpcbiAgICAgICAgb2xkOiBuZXcgVEhSRUUuVmVjdG9yMygpXG4gICAgICAgIG5ldzogbmV3IFRIUkVFLlZlY3RvcjMoKVxuICAgICAgcXVldWU6IFtdXG5cbiAgICBAcGFuVG8gPVxuICAgICAgYWN0aXZlOiBmYWxzZVxuICAgICAgdGltZTpcbiAgICAgICAgc3RhcnQ6IDBcbiAgICAgICAgZW5kOiAwXG4gICAgICBmcm9tOlxuICAgICAgICByb3RhdGlvbjpcbiAgICAgICAgICB4OiAwXG4gICAgICAgICAgeTogMFxuICAgICAgICAgIHo6IDBcbiAgICAgIHRvOlxuICAgICAgICByb3RhdGlvbjpcbiAgICAgICAgICB4OiAwXG4gICAgICAgICAgeTogMFxuICAgICAgICAgIHo6IDBcblxuICAgIEBpc1JlbmRlcmluZyA9IGZhbHNlXG4gICAgQHJlbmRlck9uY2UgPSBmYWxzZVxuXG4gICAgQGNvbXBhc3NOZWVkbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnY29tcGFzcy1kaXJlY3Rpb24taWNvbidcblxuICBzdGFydDogLT5cbiAgICAjIENyZWF0ZSB0aGUgc2NlbmVcbiAgICBAaW5pdFNjZW5lID0+XG4gICAgICAjIEFkZCB0aGUgb2JqZWN0cyB0byByZW5kZXJcbiAgICAgIEBpbml0T2JqZWN0cyA9PlxuICAgICAgICAjIEFkZCB0aGUgcmVuZGVyZXJcbiAgICAgICAgQGluaXRSZW5kZXJlciA9PlxuICAgICAgICAgICMgQWRkIHRoZSBjYWxsYmFja3MgZm9yIG1hbmFnZW1lbnRcbiAgICAgICAgICBAaW5pdENvbnRyb2xzID0+XG4gICAgICAgICAgICAjIEZvcmNlIGEgcmVuZGVyXG4gICAgICAgICAgICBAZG9SZW5kZXIoKVxuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIHJldHVyblxuXG4gICAgICByZXR1cm5cblxuICAgIHJldHVyblxuXG4gIGluaXRTY2VuZTogKGNiKSA9PlxuICAgICMgSW5pdCBTY2VuZVxuICAgIEBzY2VuZSA9IG5ldyAoVEhSRUUuU2NlbmUpXG5cbiAgICAjIEluaXQgQ2FtZXJhXG4gICAgQGNhbWVyYSA9IG5ldyAoVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpKDcwLCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMSwgVGhyZWVTaXh0eTo6U2NhbGUgKiAxMClcblxuICAgIEBwYXJlbnRPYmplY3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKVxuICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24ub3JkZXIgPSAnWVhaJ1xuICAgIEBzY2VuZS5hZGQgQHBhcmVudE9iamVjdFxuXG4gICAgQHBhcmVudE9iamVjdC5hZGQgQGNhbWVyYVxuXG4gICAgQHJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKVxuXG4gICAgIyBCZWNhdXNlIHdlIGRvbid0IHJvdGF0ZSBpbiB0aGUgWiBkaXJlY3Rpb24sIHRoaXMgd2lsbCBiZSBhIG5hdHVyYWwgcm90YXRpb24gb3JkZXJcbiAgICBAY2FtZXJhLnJvdGF0aW9uLm9yZGVyID0gJ1lYWidcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdyZXNpemUnLCAoKCkgPT5cbiAgICAgICMgQ29ycmVjdCB0aGUgY2FtZXJhJ3MgYXNwZWN0IHJhdGlvXG4gICAgICBAY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICBAY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKVxuXG4gICAgICAjIEFkanVzdCB0aGUgcmVuZGVyZXIgc2l6ZVxuICAgICAgQHJlbmRlcmVyLnNldFNpemUgd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodFxuXG4gICAgICAjIFJlLXJlbmRlciB0aGlzIG9uZSB0aW1lXG4gICAgICBAZG9SZW5kZXIoKVxuXG4gICAgICAjIEV4aXRcbiAgICAgIHJldHVyblxuICAgICksIGZhbHNlXG5cbiAgICBjYigpXG5cbiAgaW5pdE9iamVjdHM6IChjYikgPT5cbiAgICBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBAdXJscywgbnVsbCwgKHRleHR1cmUpID0+XG4gICAgICAjIGluaXQgdGhlIGN1YmUgc2hhZGRlclxuICAgICAgc2hhZGVyID0gVEhSRUUuU2hhZGVyTGliWydjdWJlJ11cblxuICAgICAgIyBTZXR1cCB0aGUgdW5pZm9ybVxuICAgICAgdW5pZm9ybXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLmNsb25lKHNoYWRlci51bmlmb3JtcylcbiAgICAgIHVuaWZvcm1zWyd0Q3ViZSddLnZhbHVlID0gdGV4dHVyZVxuXG4gICAgICAjIGNhbWVyYXRlIHRoZSBtYXRlcmlhbFxuICAgICAgbWF0ZXJpYWwgPSBuZXcgKFRIUkVFLlNoYWRlck1hdGVyaWFsKShcbiAgICAgICAgZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlclxuICAgICAgICB2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXJcbiAgICAgICAgdW5pZm9ybXM6IHVuaWZvcm1zXG4gICAgICAgIHNpZGU6IFRIUkVFLkJhY2tTaWRlKVxuXG4gICAgICAjIG1hdGVyaWFsLndpcmVmcmFtZSA9IHRydWVcblxuICAgICAgIyBHZW5lcmF0ZSBhIHNwaGVyZSBnZW9tZXRyeVxuICAgICAgbWVzaEdlb21ldHJ5ID0gbmV3IChUSFJFRS5TcGhlcmVHZW9tZXRyeSkoVGhyZWVTaXh0eTo6U2NhbGUsIDMyLCAzMilcblxuICAgICAgIyBidWlsZCB0aGUgc2t5Ym94IE1lc2ggdXNpbmcgdGhlIHRleHR1cmUgY3ViZVxuICAgICAgQHNreUJveCA9IG5ldyAoVEhSRUUuTWVzaCkobWVzaEdlb21ldHJ5LCBtYXRlcmlhbClcblxuICAgICAgIyBhbmQgYWRkIGl0IHRvIHRoZSBzY2VuZVxuICAgICAgQHNjZW5lLmFkZCBAc2t5Qm94XG5cbiAgICAgIGNiKClcblxuICBpbml0UmVuZGVyZXI6IChjYikgPT5cbiAgICBAcmVuZGVyZXIgPSBuZXcgKFRIUkVFLldlYkdMUmVuZGVyZXIpKClcbiAgICBAcmVuZGVyZXIuc2V0U2l6ZSB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0XG4gICAgQGJveC5hcHBlbmRDaGlsZCBAcmVuZGVyZXIuZG9tRWxlbWVudFxuXG4gICAgY2IoKVxuXG4gIGluaXRDb250cm9sczogKGNiKSA9PlxuICAgICMgS2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIEBldmVudE9uS2V5RG93biwgZmFsc2VcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdrZXl1cCcsIEBldmVudE9uS2V5VXAsIGZhbHNlXG5cbiAgICAjIE1vdXNlIGRyYWdnaW5nXG4gICAgQHJlbmRlcmVyLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJywgQGV2ZW50TW91c2VEb3duLCBmYWxzZVxuICAgIEByZW5kZXJlci5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlbW92ZScsIEBldmVudE1vdXNlTW92ZSwgZmFsc2VcbiAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJywgQGV2ZW50TW91c2VVcCwgZmFsc2VcbiAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyICdtb3VzZW91dCcsIEBldmVudE1vdXNlVXAsIGZhbHNlXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2V3aGVlbCcsIEBldmVudFNjcm9sbCwgZmFsc2VcblxuICAgIG1hcENvbnRyb2xzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnW2RhdGEtbWFwLWNvbnRyb2xdJ1xuXG4gICAgZm9yIG1hcENvbnRyb2wgaW4gbWFwQ29udHJvbHNcbiAgICAgIGRvIChtYXBDb250cm9sKSA9PlxuICAgICAgICBkaXJlY3Rpb24gPSBtYXBDb250cm9sLmRhdGFzZXQubWFwQ29udHJvbFxuXG4gICAgICAgIG1hcENvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCAoZSkgPT5cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICAgIEBldmVudERvRG9tQ29udHJvbCBkaXJlY3Rpb25cblxuICAgICAgICAgIHJldHVyblxuXG4gICAgY2IoKVxuXG4gIGV2ZW50RG9Eb21Db250cm9sOiAob3BlcmF0aW9uKSA9PlxuICAgIEBwYW5Uby50aW1lLnN0YXJ0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIEBwYW5Uby50aW1lLmVuZCA9IEBwYW5Uby50aW1lLnN0YXJ0ICsgNzAwXG5cbiAgICAjIGdldCB0aGUgY3VycmVudCBjYW1lcmEgcm90YXRpb25cbiAgICBmcm9tUm90YXRpb24gPSBAcGFyZW50T2JqZWN0LnJvdGF0aW9uLmNsb25lKClcblxuICAgIEBwYW5Uby5mcm9tLnJvdGF0aW9uID0gZnJvbVJvdGF0aW9uXG4gICAgQHBhblRvLnRvLnJvdGF0aW9uID0gZnJvbVJvdGF0aW9uLmNsb25lKClcblxuICAgIEBwYW5Uby5mcm9tLnBvc2l0aW9uID0gQGNhbWVyYS5wb3NpdGlvbi56XG4gICAgQHBhblRvLnRvLnBvc2l0aW9uID0gQHBhblRvLmZyb20ucG9zaXRpb25cblxuICAgIHN3aXRjaCBvcGVyYXRpb25cbiAgICAgIHdoZW4gVGhyZWVTaXh0eTo6TEVGVFxuICAgICAgICAjIG1vdmUgdXMgUEkvMiBpbiB0aGUgK1kgZGlyZWN0aW9uXG4gICAgICAgIEBwYW5Uby50by5yb3RhdGlvbi55ID0gQHBhblRvLmZyb20ucm90YXRpb24ueSArIE1hdGguUEkvMlxuICAgICAgd2hlbiBUaHJlZVNpeHR5OjpSSUdIVFxuICAgICAgICAjIG1vdmUgdXMgUEkvMiBpbiB0aGUgLVkgZGlyZWN0aW9uXG4gICAgICAgIEBwYW5Uby50by5yb3RhdGlvbi55ID0gQHBhblRvLmZyb20ucm90YXRpb24ueSAtIE1hdGguUEkvMlxuICAgICAgd2hlbiBUaHJlZVNpeHR5OjpJTlxuICAgICAgICBAcGFuVG8udG8ucG9zaXRpb24gLT0gMVxuICAgICAgd2hlbiBUaHJlZVNpeHR5OjpPVVRcbiAgICAgICAgQHBhblRvLnRvLnBvc2l0aW9uICs9IDFcbiAgICAgIHdoZW4gVGhyZWVTaXh0eTo6UkVTRVRcbiAgICAgICAgQHBhcmVudE9iamVjdC5yb3RhdGlvbi55ID0gQHBhcmVudE9iamVjdC5yb3RhdGlvbi55ICUgKDIgKiBNYXRoLlBJKVxuXG4gICAgICAgIEBwYW5Uby50by5yb3RhdGlvbi54ID0gMFxuICAgICAgICBAcGFuVG8udG8ucm90YXRpb24ueSA9IDBcbiAgICAgICAgQHBhblRvLnRvLnBvc2l0aW9uID0gMFxuICAgICAgZWxzZVxuICAgICAgICBjb25zb2xlLmxvZyBcImNhbid0IGRvICN7b3BlcmF0aW9ufVwiXG4gICAgICAgIHJldHVyblxuXG4gICAgQHBhblRvLnRvLnBvc2l0aW9uID0gQGNsYW1wUG9zaXRpb24oQHBhblRvLnRvLnBvc2l0aW9uKVxuICAgIEBjbGFtcFJvdGF0aW9uKEBwYW5Uby50bylcblxuICAgICMgbWFyayB0aGUgcGFubmluZyBhcyBhY3RpdmVcbiAgICBAcGFuVG8uYWN0aXZlID0gdHJ1ZVxuXG4gICAgIyBiZWdpbiB0aGUgcmVuZGVyXG4gICAgQHN0YXJ0UmVuZGVyKClcblxuICAgIHJldHVyblxuXG4gIGV2ZW50T25LZXlEb3duOiAoZSkgPT5cbiAgICAjIEdldCB0aGUgZGlyZWN0aW9uXG4gICAgZGlyID0gQGdldERpcmVjdGlvbiBlLmtleUNvZGVcblxuICAgICMgSWYgdGhpcyBpcyBhIGRpcmVjdGlvbiBrZXkuLi5cbiAgICBpZiBkaXI/XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgIyBQZXJmb3JtIGl0J3MgYWN0aW9uXG4gICAgICBAYmVnaW5LZXlQcmVzcyBkaXJcblxuICAgICAgIyBBbmQgZmluaXNoXG4gICAgICByZXR1cm5cblxuICBldmVudE9uS2V5VXA6IChlKSA9PlxuICAgICMgR2V0IHRoZSBkaXJlY3Rpb25cbiAgICBkaXIgPSBAZ2V0RGlyZWN0aW9uIGUua2V5Q29kZVxuXG4gICAgIyBJZiB0aGlzIGlzIGEgZGlyZWN0aW9uIGtleS4uLlxuICAgIGlmIGRpcj9cbiAgICAgICMgUGVyZm9ybSBpdCdzIGFjdGlvblxuICAgICAgQGVuZEtleVByZXNzIGRpclxuXG4gICAgICAjIEFuZCBmaW5pc2hcbiAgICAgIHJldHVyblxuXG4gIGV2ZW50U2Nyb2xsOiAoZSkgPT5cbiAgICBAY2FtZXJhLnBvc2l0aW9uLnogKz0gZS53aGVlbERlbHRhIC8gVGhyZWVTaXh0eTo6TW91c2VXaGVlbFNjYWxlXG4gICAgQGNhbWVyYS5wb3NpdGlvbi56ID0gQGNsYW1wUG9zaXRpb24oQGNhbWVyYS5wb3NpdGlvbi56KVxuXG4gICAgQHJlbmRlck9uY2UgPSB0cnVlXG4gICAgQHN0YXJ0UmVuZGVyKClcblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGZhbHNlXG5cbiAgZXZlbnRNb3VzZURvd246IChlKSA9PlxuICAgIEBncmFiLmFjdGl2ZSA9IHRydWVcblxuICAgICMgU3RhcnQgZHJhZy1iYXNlZCByb3RhdGlvbi4gV2UgcmF5Y2FzdCBhIHBvaW50IG9uIHRoZSBvdXRlciBzcGhlcmUgYXMgb3VyIHJlZmVyZW5jZSxcbiAgICAjIGJhc2VkIG9uIHdoZXJlIHRoZSB1c2VyIGhhcyBjbGlja2VkLiBUaGlzIGlzIHN0b3JlZCBhcyBAZ3JhYi5yYXljYXN0Lm9sZC5cbiAgICAjIEluIGV2ZW50TW91c2VNb3ZlLCB3ZSByYXljYXN0IGFnYWluLCBmaW5kIHRoZSBuZXcgcG9pbnQgb24gdGhlIHNwaGVyZSwgYW5kIGNhbGN1bGF0ZVxuICAgICMgdGhlIHJvdGF0aW9uIHJlcXVpcmVkIHRvIHJvdGF0ZSB0aGUgcmVmZXJlbmNlIHBvaW50IHRvIHRoYXQgbG9jYXRpb24uIFRoaXNcbiAgICAjIHJvdGF0aW9uIGlzIGFwcGxpZWQgdG8gdGhlIGNhbWVyYSwgZXhjZXB0IGZvciB0aGUgWiBjb21wb25lbnQsIHdoaWNoIHdvdWxkIGJlIHZlcnlcbiAgICAjIGNvbmZ1c2luZy5cbiAgICBAZ3JhYi5wb3NpdGlvbi54ID0gKCBlLmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDE7XG4gICAgQGdyYWIucG9zaXRpb24ueSA9IC0gKCBlLmNsaWVudFkgLyB3aW5kb3cuaW5uZXJIZWlnaHQgKSAqIDIgKyAxO1xuICAgIEB1cGRhdGVNb3VzZVJheWNhc3QoKVxuICAgIEBncmFiLnJheWNhc3Qub2xkID0gQGdyYWIucmF5Y2FzdC5uZXdcblxuICAgIEBzdGFydFJlbmRlcigpXG5cbiAgICByZXR1cm5cblxuICBldmVudE1vdXNlTW92ZTogKGUpID0+XG4gICAgaWYgQGdyYWIuYWN0aXZlXG4gICAgICBAZ3JhYi5wb3NpdGlvbi54ID0gKCBlLmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDE7XG4gICAgICBAZ3JhYi5wb3NpdGlvbi55ID0gLSAoIGUuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCApICogMiArIDE7XG5cbiAgICAgIEB1cGRhdGVNb3VzZVJheWNhc3QoKVxuXG4gICAgICBAY2FsY3VsYXRlUmF5Y2FzdEFuZ2xlKClcblxuICAgIHJldHVyblxuXG4gIGV2ZW50TW91c2VVcDogKCkgPT5cbiAgICBAZ3JhYi5hY3RpdmUgPSBmYWxzZVxuICAgIHJldHVyblxuXG4gIHVwZGF0ZU1vdXNlUmF5Y2FzdDogKCkgPT5cbiAgICBAcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEgQGdyYWIucG9zaXRpb24sIEBjYW1lcmFcblxuICAgIHJheWNhc3RQb2ludCA9IEByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0KEBza3lCb3gpWzBdXG5cbiAgICBAZ3JhYi5yYXljYXN0Lm5ldyA9IHJheWNhc3RQb2ludC5wb2ludC5ub3JtYWxpemUoKVxuXG4gICAgcmV0dXJuXG5cbiAgY2FsY3VsYXRlUmF5Y2FzdEFuZ2xlOiAoKSA9PlxuICAgICMgZmluZCBhbmdsZSBiZXR3ZWVuIHdoZXJlIHRoZSBtb3VzZSByYXkgaGl0cyB0aGUgc3BoZXJlIGFuZCB3aGVyZSB3ZSB3YW50IGl0XG4gICAgIyB0byBoaXQgKHRoZSBzcG90IG9uIHRoZSBzcGhlcmUgdGhhdCB3YXMgb3JpZ2luYWxseSBncmFiYmVkKS5cbiAgICBxUm90ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKVxuICAgIHFSb3Quc2V0RnJvbVVuaXRWZWN0b3JzIEBncmFiLnJheWNhc3QubmV3LCBAZ3JhYi5yYXljYXN0Lm9sZFxuXG4gICAgIyBub3cgd2Ugcm90YXRlIHRoZSBjYW1lcmEgc28gdGhhdCBpZiB3ZSBkaWQgdGhlIHJheSBjYXN0IGFnYWluLCB3ZSB3b3VsZCBoaXRcbiAgICAjIG91ciByZWZlcmVuY2UgcG9pbnQgKHdoZXJlIHRoZSB1c2VyIGdyYWJiZWQpXG5cbiAgICAjIGFkZCB0aGUgbmV3IHJvdGF0aW9uIHRvIG91ciBvcmlnaW5hbFxuICAgIG9sZFJvdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKClcbiAgICBvbGRSb3Quc2V0RnJvbUV1bGVyIEBwYXJlbnRPYmplY3Qucm90YXRpb25cblxuICAgIHFSb3QubXVsdGlwbHkgb2xkUm90XG5cbiAgICBldWxlck9yZGVyID0gQHBhcmVudE9iamVjdC5yb3RhdGlvbi5vcmRlclxuICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24uc2V0RnJvbVF1YXRlcm5pb24gcVJvdCwgZXVsZXJPcmRlclxuXG4gICAgIyBub3cgd2UgdHJ5IHRvIGZpeCB1cFxuICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24ueiA9IDBcblxuICAgICMgY2xhbXAgeCByb3RhdGlvbiAocGl0Y2gpXG4gICAgQGNsYW1wUm90YXRpb24oQHBhcmVudE9iamVjdClcbiAgICByZXR1cm5cblxuICBlbmRLZXlQcmVzczogKGRpcmVjdGlvbikgPT5cbiAgICAjIElmIHdlIGFyZW4ndCB0cmFja2luZyBpdFxuICAgIEBkaXJlY3Rpb25zW2RpcmVjdGlvbl0gPSBmYWxzZSBpZiBAZGlyZWN0aW9uc1tkaXJlY3Rpb25dXG5cbiAgYmVnaW5LZXlQcmVzczogKGRpcmVjdGlvbikgPT5cbiAgICAjIElmIHdlIGFscmVhZHkgYXJlIG1hbmFnaW5nIHRoaXMgZGlyZWN0aW9uXG4gICAgaWYgQGRpcmVjdGlvbnNbZGlyZWN0aW9uXVxuICAgICAgIyBUaGVuIGp1c3QgcmV0dXJuXG4gICAgICByZXR1cm5cblxuICAgICMgT3RoZXJ3aXNlIHNldCBpdCB0byB0cnVlXG4gICAgQGRpcmVjdGlvbnNbZGlyZWN0aW9uXSA9IHRydWVcblxuICAgIEBzdGFydFJlbmRlcigpXG5cbiAgZ2V0RGlyZWN0aW9uOiAoa2V5KSA9PlxuICAgIHN3aXRjaCBrZXlcbiAgICAgIHdoZW4gMzcsIDY1IHRoZW4gVGhyZWVTaXh0eTo6TEVGVFxuICAgICAgd2hlbiAzOCwgODcgdGhlbiBUaHJlZVNpeHR5OjpVUFxuICAgICAgd2hlbiAzOSwgNjggdGhlbiBUaHJlZVNpeHR5OjpSSUdIVFxuICAgICAgd2hlbiA0MCwgODMgdGhlbiBUaHJlZVNpeHR5OjpET1dOXG4gICAgICB3aGVuIDE4NyB0aGVuIFRocmVlU2l4dHk6OklOXG4gICAgICB3aGVuIDE4OSB0aGVuIFRocmVlU2l4dHk6Ok9VVFxuICAgICAgZWxzZSBmYWxzZVxuXG4gIG1vdmU6IChkaXJlY3Rpb24pID0+XG4gICAgc3dpdGNoIGRpcmVjdGlvblxuICAgICAgd2hlbiBUaHJlZVNpeHR5OjpMRUZUXG4gICAgICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24ueSArPSBNYXRoLlBJIC8gMjAwXG4gICAgICB3aGVuIFRocmVlU2l4dHk6OlVQXG4gICAgICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24ueCArPSBNYXRoLlBJIC8gMjAwXG4gICAgICB3aGVuIFRocmVlU2l4dHk6OlJJR0hUXG4gICAgICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24ueSAtPSBNYXRoLlBJIC8gMjAwXG4gICAgICB3aGVuIFRocmVlU2l4dHk6OkRPV05cbiAgICAgICAgQHBhcmVudE9iamVjdC5yb3RhdGlvbi54IC09IE1hdGguUEkgLyAyMDBcbiAgICAgIHdoZW4gVGhyZWVTaXh0eTo6SU5cbiAgICAgICAgQGNhbWVyYS5wb3NpdGlvbi56ICs9IFRocmVlU2l4dHk6OlNjYWxlIC8gLTEwMFxuICAgICAgd2hlbiBUaHJlZVNpeHR5OjpPVVRcbiAgICAgICAgQGNhbWVyYS5wb3NpdGlvbi56ICs9IFRocmVlU2l4dHk6OlNjYWxlIC8gMTAwXG4gICAgICBlbHNlIG51bGxcblxuICAgIEBjYW1lcmEucG9zaXRpb24ueiA9IEBjbGFtcFBvc2l0aW9uKEBjYW1lcmEucG9zaXRpb24ueilcbiAgICBAY2xhbXBSb3RhdGlvbihAcGFyZW50T2JqZWN0KVxuXG4gICAgcmV0dXJuXG5cbiAgY2xhbXBQb3NpdGlvbjogKHBvc2l0aW9uKSA9PlxuICAgIGlmIHBvc2l0aW9uIDwgVGhyZWVTaXh0eTo6U2NhbGUgKiAtMC40XG4gICAgICBUaHJlZVNpeHR5OjpTY2FsZSAqIC0wLjRcbiAgICBlbHNlIGlmIHBvc2l0aW9uID4gMFxuICAgICAgMFxuICAgIGVsc2VcbiAgICAgIHBvc2l0aW9uXG5cbiAgY2xhbXBSb3RhdGlvbjogKG9iamVjdCkgPT5cbiAgICBpZiBvYmplY3Qucm90YXRpb24ueCA+IFRocmVlU2l4dHk6Ok1heFJvdGF0aW9uXG4gICAgICBvYmplY3Qucm90YXRpb24ueCA9IFRocmVlU2l4dHk6Ok1heFJvdGF0aW9uXG5cbiAgICBpZiBvYmplY3Qucm90YXRpb24ueCA8IC1UaHJlZVNpeHR5OjpNYXhSb3RhdGlvblxuICAgICAgb2JqZWN0LnJvdGF0aW9uLnggPSAtVGhyZWVTaXh0eTo6TWF4Um90YXRpb25cblxuICAgIHJldHVyblxuXG4gIHN0YXJ0UmVuZGVyOiA9PlxuICAgICMgSWYgaXQgaXMgbm90IHJlbmRlcmluZy4uLlxuICAgIGlmICFAaXNSZW5kZXJpbmdcblxuICAgICAgIyBUaGVuIG1hcmsgaXQgYXMgcmVuZGVyaW5nXG4gICAgICBAaXNSZW5kZXJpbmcgPSB0cnVlXG5cbiAgICAgICMgQW5kIHN0YXJ0IHRoZSByZW5kZXJcbiAgICAgIEByZW5kZXIoKVxuXG4gICAgcmV0dXJuXG5cbiAgcHJvY2Vzc1BhblRvOiAoKSA9PlxuICAgIFRjID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuXG4gICAgaWYgQHBhcmVudE9iamVjdC5yb3RhdGlvbi55ICE9IEBwYW5Uby50by5yb3RhdGlvbi55XG4gICAgICBAcGFyZW50T2JqZWN0LnJvdGF0aW9uLnkgPSBAcXVhZHJhdGljRWFzZUluRWFzZU91dChUYywgQHBhblRvLnRvLnJvdGF0aW9uLnksIEBwYW5Uby5mcm9tLnJvdGF0aW9uLnkpXG5cbiAgICBpZiBAcGFyZW50T2JqZWN0LnJvdGF0aW9uLnggIT0gQHBhblRvLnRvLnJvdGF0aW9uLnhcbiAgICAgIEBwYXJlbnRPYmplY3Qucm90YXRpb24ueCA9IEBxdWFkcmF0aWNFYXNlSW5FYXNlT3V0KFRjLCBAcGFuVG8udG8ucm90YXRpb24ueCwgQHBhblRvLmZyb20ucm90YXRpb24ueClcblxuICAgIGlmIEBjYW1lcmEucG9zaXRpb24ueiAhPSBAcGFuVG8udG8ucG9zaXRpb25cbiAgICAgIEBjYW1lcmEucG9zaXRpb24ueiA9IEBxdWFkcmF0aWNFYXNlSW5FYXNlT3V0KFRjLCBAcGFuVG8udG8ucG9zaXRpb24sIEBwYW5Uby5mcm9tLnBvc2l0aW9uKVxuXG4gICAgaWYgVGMgPj0gQHBhblRvLnRpbWUuZW5kXG4gICAgICBAcGFyZW50T2JqZWN0LnJvdGF0aW9uLnkgPSBAcGFuVG8udG8ucm90YXRpb24ueVxuICAgICAgQHBhcmVudE9iamVjdC5yb3RhdGlvbi54ID0gQHBhblRvLnRvLnJvdGF0aW9uLnhcbiAgICAgIEBjYW1lcmEucG9zaXRpb24ueiA9IEBwYW5Uby50by5wb3NpdGlvblxuXG4gICAgICAjIHN0b3AgcGFubmluZ1xuICAgICAgQHBhblRvLmFjdGl2ZSA9IGZhbHNlXG5cbiAgICByZXR1cm5cblxuICBxdWFkcmF0aWNFYXNlSW5FYXNlT3V0OiAoVGMsIEcsIEIpID0+XG4gICAgIyBjb21wdXRlIHRpbWVcbiAgICB0ID0gMiAqIChUYyAtIEBwYW5Uby50aW1lLnN0YXJ0KSAvIChAcGFuVG8udGltZS5lbmQgLSBAcGFuVG8udGltZS5zdGFydClcblxuICAgIGlmIHQgPCAxXG4gICAgICByZXR1cm4gKChHIC0gQikvMikgKiB0ICogdCArIEJcbiAgICBlbHNlXG4gICAgICB0ID0gdCAtIDFcbiAgICAgIHJldHVybiAoKEIgLSBHKS8yKSAqICh0ICogKHQgLSAyKSAtIDEpICsgQlxuXG4gIHByb2Nlc3NNb3ZlbWVudHM6ICgpID0+XG4gICAgXy5tYXAgQGRpcmVjdGlvbnMsIChlbmFibGVkLCBkaXJlY3Rpb24pID0+XG4gICAgICBAbW92ZSBkaXJlY3Rpb24gaWYgZW5hYmxlZFxuXG4gICAgaWYgQHBhblRvLmFjdGl2ZVxuICAgICAgQHByb2Nlc3NQYW5UbygpXG5cbiAgICAjIGFkanVzdCB0aGUgcm90YXRpb24gb2YgdGhlIGNvbXBhc3MgbmVlZGxlXG4gICAgcm90YXRpb25TdHJpbmcgPSBcInJvdGF0ZSgje0BwYXJlbnRPYmplY3Qucm90YXRpb24ueX1yYWQpXCJcbiAgICBAY29tcGFzc05lZWRsZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSByb3RhdGlvblN0cmluZ1xuICAgIEBjb21wYXNzTmVlZGxlLnN0eWxlLnRyYW5zZm9ybSA9IHJvdGF0aW9uU3RyaW5nXG5cbiAgICByZXR1cm5cblxuICBzaG91bGRSZXJlbmRlcjogPT5cbiAgICAjIElmIHRoZXJlIGFyZSBzb21lIGRpcmVjdGlvbnMgYWN0aXZlLi4uXG4gICAgQGdyYWIuYWN0aXZlIG9yIF8uc29tZShAZGlyZWN0aW9ucykgb3IgQHBhblRvLmFjdGl2ZSBvciBAcmVuZGVyT25jZVxuXG4gIGRvUmVuZGVyOiAtPlxuICAgICMgUmVuZGVyIHRoZSBzY2VuZVxuICAgIEByZW5kZXJlci5yZW5kZXIgQHNjZW5lLCBAY2FtZXJhXG4gICAgQHJlbmRlck9uY2UgPSBmYWxzZVxuXG4gIHJlbmRlcjogPT5cbiAgICBpZiBAc2hvdWxkUmVyZW5kZXIoKVxuICAgICAgIyBSZXF1ZXN0IHRoZSBhbmltYXRpb24gdG8gcmVwZWF0IG9uY2UgbW9yZVxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIFRocmVlU2l4dHk6OnJlbmRlci5iaW5kKHRoaXMpXG5cbiAgICAgICMgUHJvY2VzcyBhbGwgdGhlIG1vdmVtZW50c1xuICAgICAgQHByb2Nlc3NNb3ZlbWVudHMoKVxuXG4gICAgICAjIERvIHRoZSByZW5kZXJcbiAgICAgIEBkb1JlbmRlcigpXG5cbiAgICBlbHNlXG4gICAgICAjIEZpbmlzaGVkIHJlbmRlcmluZ1xuICAgICAgQGlzUmVuZGVyaW5nID0gZmFsc2VcblxuICAgIHJldHVyblxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdET01Db250ZW50TG9hZGVkJywgLT5cbiAgdHMgPSBuZXcgVGhyZWVTaXh0eSBkb2N1bWVudC5ib2R5LCBbXG4gICAgJ2ltYWdlcy95b2tvaGFtYS9wb3MteC5qcGcnLFxuICAgICdpbWFnZXMveW9rb2hhbWEvbmVnLXguanBnJyxcbiAgICAnaW1hZ2VzL3lva29oYW1hL3Bvcy15LmpwZycsXG4gICAgJ2ltYWdlcy95b2tvaGFtYS9uZWcteS5qcGcnLFxuICAgICdpbWFnZXMveW9rb2hhbWEvcG9zLXouanBnJyxcbiAgICAnaW1hZ2VzL3lva29oYW1hL25lZy16LmpwZydcbiAgXVxuXG4gIHRzLnN0YXJ0KClcblxuICByZXR1cm5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==