var ThreeSixty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ThreeSixty = (function() {
  ThreeSixty.prototype.VerticalAngleCutOff = Math.PI / 4;

  ThreeSixty.prototype.DiectionalIncrement = Math.PI / 128;

  ThreeSixty.prototype.DriftCutOff = 0.01;

  ThreeSixty.prototype.DriftSlowdownRate = 0.90;

  ThreeSixty.prototype.LEFT = 0;

  ThreeSixty.prototype.RIGHT = 1;

  ThreeSixty.prototype.UP = 2;

  ThreeSixty.prototype.DOWN = 3;

  function ThreeSixty(box, urls) {
    this.render = bind(this.render, this);
    this.processMovements = bind(this.processMovements, this);
    this.processMouseMovements = bind(this.processMouseMovements, this);
    this.startRender = bind(this.startRender, this);
    this.boundMovements = bind(this.boundMovements, this);
    this.move = bind(this.move, this);
    this.getDirection = bind(this.getDirection, this);
    this.beginKeyPress = bind(this.beginKeyPress, this);
    this.endKeyPress = bind(this.endKeyPress, this);
    this.eventMouseUp = bind(this.eventMouseUp, this);
    this.eventMouseMove = bind(this.eventMouseMove, this);
    this.eventMouseDown = bind(this.eventMouseDown, this);
    this.eventOnKeyUp = bind(this.eventOnKeyUp, this);
    this.eventOnKeyDown = bind(this.eventOnKeyDown, this);
    this.initControls = bind(this.initControls, this);
    this.initRenderer = bind(this.initRenderer, this);
    this.initObjects = bind(this.initObjects, this);
    this.initScene = bind(this.initScene, this);
    this.urls = urls;
    this.box = box;
    this.directions = [false, false, false, false];
    this.mouse = {
      active: false,
      panning: false,
      speed: {
        x: 0,
        y: 0,
        z: 0
      }
    };
    this.isRendering = false;
    this.stats = new Stats();
  }

  ThreeSixty.prototype.start = function() {
    this.initScene((function(_this) {
      return function() {
        _this.initObjects(function() {
          _this.initRenderer(function() {
            _this.initControls(function() {
              _this.doRender();
            });
          });
        });
      };
    })(this));
  };

  ThreeSixty.prototype.initScene = function(cb) {
    this.scene = new THREE.Scene;
    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
    this.camera.rotation.order = 'YXZ';
    window.addEventListener('resize', ((function(_this) {
      return function() {
        _this.camera.aspect = window.innerWidth / window.innerHeight;
        _this.camera.updateProjectionMatrix();
        _this.renderer.setSize(window.innerWidth, window.innerHeight);
        _this.doRender();
      };
    })(this)), false);
    return cb();
  };

  ThreeSixty.prototype.initObjects = function(cb) {
    return THREE.ImageUtils.loadTextureCube(this.urls, null, (function(_this) {
      return function(texture) {
        var material, meshGeometry, shader, skyBox, uniforms;
        shader = THREE.ShaderLib['cube'];
        uniforms = THREE.UniformsUtils.clone(shader.uniforms);
        uniforms['tCube'].value = texture;
        material = new THREE.ShaderMaterial({
          fragmentShader: shader.fragmentShader,
          vertexShader: shader.vertexShader,
          uniforms: uniforms,
          side: THREE.BackSide
        });
        meshGeometry = new THREE.SphereGeometry(1000, 32, 32);
        skyBox = new THREE.Mesh(meshGeometry, material);
        _this.scene.add(skyBox);
        return cb();
      };
    })(this));
  };

  ThreeSixty.prototype.initRenderer = function(cb) {
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.box.appendChild(this.renderer.domElement);
    this.stats.setMode(0);
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.right = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    return cb();
  };

  ThreeSixty.prototype.initControls = function(cb) {
    document.addEventListener('keydown', this.eventOnKeyDown, false);
    document.addEventListener('keyup', this.eventOnKeyUp, false);
    this.renderer.domElement.addEventListener('mousedown', this.eventMouseDown, false);
    this.renderer.domElement.addEventListener('mousemove', this.eventMouseMove, false);
    this.renderer.domElement.addEventListener('mouseup', this.eventMouseUp, false);
    this.renderer.domElement.addEventListener('mouseout', this.eventMouseUp, false);
    return cb();
  };

  ThreeSixty.prototype.eventOnKeyDown = function(e) {
    var dir;
    dir = this.getDirection(e.keyCode);
    if (dir != null) {
      this.beginKeyPress(dir);
    }
  };

  ThreeSixty.prototype.eventOnKeyUp = function(e) {
    var dir;
    dir = this.getDirection(e.keyCode);
    if (dir != null) {
      this.endKeyPress(dir);
    }
  };

  ThreeSixty.prototype.eventMouseDown = function(e) {
    this.mouse.active = true;
    this.mouse.panning = true;
    this.startRender();
  };

  ThreeSixty.prototype.eventMouseMove = function(e) {
    if (this.mouse.active) {
      this.mouse.speed.x = e.movementY;
      this.mouse.speed.y = e.movementX;
    }
  };

  ThreeSixty.prototype.eventMouseUp = function(e) {
    this.mouse.active = false;
  };

  ThreeSixty.prototype.endKeyPress = function(direction) {
    if (this.directions[direction]) {
      return this.directions[direction] = false;
    }
  };

  ThreeSixty.prototype.beginKeyPress = function(direction) {
    if (this.directions[direction]) {
      return;
    }
    this.directions[direction] = true;
    return this.startRender();
  };

  ThreeSixty.prototype.getDirection = function(key) {
    switch (key) {
      case 37:
      case 65:
        return ThreeSixty.prototype.LEFT;
      case 38:
      case 87:
        return ThreeSixty.prototype.UP;
      case 39:
      case 68:
        return ThreeSixty.prototype.RIGHT;
      case 40:
      case 83:
        return ThreeSixty.prototype.DOWN;
      default:
        return null;
    }
  };

  ThreeSixty.prototype.move = function(direction) {
    switch (direction) {
      case ThreeSixty.prototype.LEFT:
        this.camera.rotation.y = this.camera.rotation.y + ThreeSixty.prototype.DiectionalIncrement;
        break;
      case ThreeSixty.prototype.UP:
        this.camera.rotation.x = this.camera.rotation.x + ThreeSixty.prototype.DiectionalIncrement;
        this.boundMovements();
        break;
      case ThreeSixty.prototype.RIGHT:
        this.camera.rotation.y = this.camera.rotation.y - ThreeSixty.prototype.DiectionalIncrement;
        break;
      case ThreeSixty.prototype.DOWN:
        this.camera.rotation.x = this.camera.rotation.x - ThreeSixty.prototype.DiectionalIncrement;
        this.boundMovements();
    }
  };

  ThreeSixty.prototype.boundMovements = function() {
    if (this.camera.rotation.x > ThreeSixty.prototype.VerticalAngleCutOff) {
      return this.camera.rotation.x = ThreeSixty.prototype.VerticalAngleCutOff;
    } else if (this.camera.rotation.x < -ThreeSixty.prototype.VerticalAngleCutOff) {
      return this.camera.rotation.x = -ThreeSixty.prototype.VerticalAngleCutOff;
    }
  };

  ThreeSixty.prototype.startRender = function() {
    if (!this.isRendering) {
      this.isRendering = true;
      this.render();
    }
  };

  ThreeSixty.prototype.processMouseMovements = function() {
    this.camera.rotation.x += this.mouse.speed.x / 400;
    this.camera.rotation.y += this.mouse.speed.y / 400;
    this.mouse.speed.x *= ThreeSixty.prototype.DriftSlowdownRate;
    this.mouse.speed.y *= ThreeSixty.prototype.DriftSlowdownRate;
    if (!this.mouse.active && Math.abs(this.mouse.speed.x) < ThreeSixty.prototype.driftSpeedCutoff && Math.abs(this.mouse.speed.y) < ThreeSixty.prototype.driftSpeedCutoff) {
      this.mouse.speed.x = 0;
      this.mouse.speed.y = 0;
      this.mouse.panning = false;
    }
    return this.boundMovements();
  };

  ThreeSixty.prototype.processMovements = function() {
    _.map(this.directions, (function(_this) {
      return function(enabled, direction) {
        if (enabled) {
          return _this.move(direction);
        }
      };
    })(this));
    if (this.mouse.panning) {
      this.processMouseMovements();
    }
  };

  ThreeSixty.prototype.shouldRerender = function() {
    return this.mouse.panning || _.some(this.directions);
  };

  ThreeSixty.prototype.doRender = function() {
    document.getElementById('debug').innerHTML = JSON.stringify(this.camera.rotation, null, 2);
    return this.renderer.render(this.scene, this.camera);
  };

  ThreeSixty.prototype.render = function() {
    if (this.shouldRerender()) {
      requestAnimationFrame(ThreeSixty.prototype.render.bind(this));
      this.processMovements();
      this.stats.begin();
      this.doRender();
      this.stats.end();
    } else {
      this.isRendering = false;
    }
  };

  return ThreeSixty;

})();

document.addEventListener('DOMContentLoaded', function() {
  var ts;
  ts = new ThreeSixty(document.body, ['images/yokohama/pos-x.jpg', 'images/yokohama/neg-x.jpg', 'images/yokohama/pos-y.jpg', 'images/yokohama/neg-y.jpg', 'images/yokohama/pos-z.jpg', 'images/yokohama/neg-z.jpg']);
  ts.start();
});

//# sourceMappingURL=data:application/json;base64,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OlsiY2xhc3MgVGhyZWVTaXh0eVxuXG4gICMgR2xvYmFsIHNldHRpbmdzXG4gIFZlcnRpY2FsQW5nbGVDdXRPZmY6IE1hdGguUEkgLyA0XG5cbiAgRGllY3Rpb25hbEluY3JlbWVudDogTWF0aC5QSSAvIDEyOFxuXG4gIERyaWZ0Q3V0T2ZmOiAwLjAxXG5cbiAgRHJpZnRTbG93ZG93blJhdGU6IDAuOTBcblxuICAjIERpcmVjdGlvbiBjb25zdGFudHNcbiAgTEVGVDogMFxuICBSSUdIVDogMVxuICBVUDogMlxuICBET1dOOiAzXG5cbiAgY29uc3RydWN0b3I6IChib3gsIHVybHMpIC0+XG4gICAgQHVybHMgPSB1cmxzXG4gICAgQGJveCA9IGJveFxuXG4gICAgQGRpcmVjdGlvbnMgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdXG5cbiAgICBAbW91c2UgPVxuICAgICAgYWN0aXZlOiBmYWxzZVxuICAgICAgcGFubmluZzogZmFsc2VcbiAgICAgIHNwZWVkOlxuICAgICAgICB4OiAwXG4gICAgICAgIHk6IDBcbiAgICAgICAgejogMFxuXG4gICAgQGlzUmVuZGVyaW5nID0gZmFsc2VcblxuICAgIEBzdGF0cyA9IG5ldyBTdGF0cygpXG5cbiAgc3RhcnQ6IC0+XG4gICAgIyBDcmVhdGUgdGhlIHNjZW5lXG4gICAgQGluaXRTY2VuZSA9PlxuICAgICAgIyBBZGQgdGhlIG9iamVjdHMgdG8gcmVuZGVyXG4gICAgICBAaW5pdE9iamVjdHMgPT5cbiAgICAgICAgIyBBZGQgdGhlIHJlbmRlcmVyXG4gICAgICAgIEBpbml0UmVuZGVyZXIgPT5cbiAgICAgICAgICAjIEFkZCB0aGUgY2FsbGJhY2tzIGZvciBtYW5hZ2VtZW50XG4gICAgICAgICAgQGluaXRDb250cm9scyA9PlxuICAgICAgICAgICAgIyBGb3JjZSBhIHJlbmRlclxuICAgICAgICAgICAgQGRvUmVuZGVyKClcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgICByZXR1cm5cblxuICAgICAgICByZXR1cm5cblxuICAgICAgcmV0dXJuXG5cbiAgICByZXR1cm5cblxuICBpbml0U2NlbmU6IChjYikgPT5cbiAgICAjIEluaXQgU2NlbmVcbiAgICBAc2NlbmUgPSBuZXcgKFRIUkVFLlNjZW5lKVxuXG4gICAgIyBJbml0IENhbWVyYVxuICAgIEBjYW1lcmEgPSBuZXcgKFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSg3MCwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDEsIDEwMDApXG5cbiAgICAjIEJlY2F1c2Ugd2UgZG9uJ3Qgcm90YXRlIGluIHRoZSBaIGRpcmVjdGlvbiwgdGhpcyB3aWxsIGJlIGEgbmF0dXJhbCByb3RhdGlvbiBvcmRlclxuICAgIEBjYW1lcmEucm90YXRpb24ub3JkZXIgPSAnWVhaJ1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ3Jlc2l6ZScsICgoKSA9PlxuICAgICAgIyBDb3JyZWN0IHRoZSBjYW1lcmEncyBhc3BlY3QgcmF0aW9cbiAgICAgIEBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIEBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG5cbiAgICAgICMgQWRqdXN0IHRoZSByZW5kZXJlciBzaXplXG4gICAgICBAcmVuZGVyZXIuc2V0U2l6ZSB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0XG5cbiAgICAgICMgUmUtcmVuZGVyIHRoaXMgb25lIHRpbWVcbiAgICAgIEBkb1JlbmRlcigpXG5cbiAgICAgICMgRXhpdFxuICAgICAgcmV0dXJuXG4gICAgKSwgZmFsc2VcblxuICAgIGNiKClcblxuICBpbml0T2JqZWN0czogKGNiKSA9PlxuICAgIFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmVDdWJlIEB1cmxzLCBudWxsLCAodGV4dHVyZSkgPT5cbiAgICAgICMgaW5pdCB0aGUgY3ViZSBzaGFkZGVyXG4gICAgICBzaGFkZXIgPSBUSFJFRS5TaGFkZXJMaWJbJ2N1YmUnXVxuXG4gICAgICAjIFNldHVwIHRoZSB1bmlmb3JtXG4gICAgICB1bmlmb3JtcyA9IFRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUoc2hhZGVyLnVuaWZvcm1zKVxuICAgICAgdW5pZm9ybXNbJ3RDdWJlJ10udmFsdWUgPSB0ZXh0dXJlXG5cbiAgICAgICMgY2FtZXJhdGUgdGhlIG1hdGVyaWFsXG4gICAgICBtYXRlcmlhbCA9IG5ldyAoVEhSRUUuU2hhZGVyTWF0ZXJpYWwpKFxuICAgICAgICBmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyXG4gICAgICAgIHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlclxuICAgICAgICB1bmlmb3JtczogdW5pZm9ybXNcbiAgICAgICAgc2lkZTogVEhSRUUuQmFja1NpZGUpXG5cbiAgICAgICMgR2VuZXJhdGUgYSBzcGhlcmUgZ2VvbWV0cnlcbiAgICAgIG1lc2hHZW9tZXRyeSA9IG5ldyAoVEhSRUUuU3BoZXJlR2VvbWV0cnkpKDEwMDAsIDMyLCAzMilcblxuICAgICAgIyBidWlsZCB0aGUgc2t5Ym94IE1lc2ggdXNpbmcgdGhlIHRleHR1cmUgY3ViZVxuICAgICAgc2t5Qm94ID0gbmV3IChUSFJFRS5NZXNoKShtZXNoR2VvbWV0cnksIG1hdGVyaWFsKVxuXG4gICAgICAjICMgQWRkIG1hcHBpbmcgd2lyZWZyYW1lXG4gICAgICAjXG4gICAgICAjIG1hdGVyaWFsLndpcmVmcmFtZSA9IHRydWVcbiAgICAgICNcbiAgICAgICMgKCgpID0+XG4gICAgICAjICAgZ2VvbWV0cnkgPSBuZXcgKFRIUkVFLkJveEdlb21ldHJ5KSggOTk5LCA5OTksIDk5OSApXG4gICAgICAjXG4gICAgICAjICAgbWF0ZXJpYWwgPSBuZXcgKFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKSggeyBjb2xvcjogMHgwMGZmMDAgfSApXG4gICAgICAjICAgbWF0ZXJpYWwud2lyZWZyYW1lID0gdHJ1ZVxuICAgICAgI1xuICAgICAgIyAgIGN1YmUgPSBuZXcgKFRIUkVFLk1lc2gpKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKVxuICAgICAgI1xuICAgICAgIyAgIGN1YmUucG9zaXRpb24ueCA9IDBcbiAgICAgICMgICBjdWJlLnBvc2l0aW9uLnkgPSAwXG4gICAgICAjICAgY3ViZS5wb3NpdGlvbi56ID0gMFxuICAgICAgI1xuICAgICAgIyAgIEBzY2VuZS5hZGQgY3ViZVxuICAgICAgIyApKClcblxuICAgICAgIyBhbmQgYWRkIGl0IHRvIHRoZSBzY2VuZVxuICAgICAgQHNjZW5lLmFkZCBza3lCb3hcblxuICAgICAgY2IoKVxuXG4gIGluaXRSZW5kZXJlcjogKGNiKSA9PlxuICAgIEByZW5kZXJlciA9IG5ldyAoVEhSRUUuV2ViR0xSZW5kZXJlcikoKVxuICAgIEByZW5kZXJlci5zZXRTaXplIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICBAYm94LmFwcGVuZENoaWxkIEByZW5kZXJlci5kb21FbGVtZW50XG5cbiAgICAjIFNldCBGUFMgbW9kZVxuICAgIEBzdGF0cy5zZXRNb2RlIDBcblxuICAgICMgQWRqdXN0IHN0eWxlc1xuICAgIEBzdGF0cy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBAc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5yaWdodCA9ICcwcHgnO1xuICAgIEBzdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAc3RhdHMuZG9tRWxlbWVudFxuXG4gICAgY2IoKVxuXG4gIGluaXRDb250cm9sczogKGNiKSA9PlxuICAgICMgS2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIEBldmVudE9uS2V5RG93biwgZmFsc2VcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdrZXl1cCcsIEBldmVudE9uS2V5VXAsIGZhbHNlXG5cbiAgICAjIE1vdXNlIGRyYWdnaW5nXG4gICAgQHJlbmRlcmVyLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJywgQGV2ZW50TW91c2VEb3duLCBmYWxzZVxuICAgIEByZW5kZXJlci5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlbW92ZScsIEBldmVudE1vdXNlTW92ZSwgZmFsc2VcbiAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJywgQGV2ZW50TW91c2VVcCwgZmFsc2VcbiAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyICdtb3VzZW91dCcsIEBldmVudE1vdXNlVXAsIGZhbHNlXG5cbiAgICBjYigpXG5cbiAgZXZlbnRPbktleURvd246IChlKSA9PlxuICAgICMgR2V0IHRoZSBkaXJlY3Rpb25cbiAgICBkaXIgPSBAZ2V0RGlyZWN0aW9uIGUua2V5Q29kZVxuXG4gICAgIyBJZiB0aGlzIGlzIGEgZGlyZWN0aW9uIGtleS4uLlxuICAgIGlmIGRpcj9cbiAgICAgICMgUGVyZm9ybSBpdCdzIGFjdGlvblxuICAgICAgQGJlZ2luS2V5UHJlc3MgZGlyXG5cbiAgICAgICMgQW5kIGZpbmlzaFxuICAgICAgcmV0dXJuXG5cbiAgZXZlbnRPbktleVVwOiAoZSkgPT5cbiAgICAjIEdldCB0aGUgZGlyZWN0aW9uXG4gICAgZGlyID0gQGdldERpcmVjdGlvbiBlLmtleUNvZGVcblxuICAgICMgSWYgdGhpcyBpcyBhIGRpcmVjdGlvbiBrZXkuLi5cbiAgICBpZiBkaXI/XG4gICAgICAjIFBlcmZvcm0gaXQncyBhY3Rpb25cbiAgICAgIEBlbmRLZXlQcmVzcyBkaXJcblxuICAgICAgIyBBbmQgZmluaXNoXG4gICAgICByZXR1cm5cblxuICBldmVudE1vdXNlRG93bjogKGUpID0+XG4gICAgQG1vdXNlLmFjdGl2ZSA9IHRydWVcbiAgICBAbW91c2UucGFubmluZyA9IHRydWVcblxuICAgIEBzdGFydFJlbmRlcigpXG5cbiAgICByZXR1cm5cblxuICBldmVudE1vdXNlTW92ZTogKGUpID0+XG4gICAgaWYgQG1vdXNlLmFjdGl2ZVxuICAgICAgQG1vdXNlLnNwZWVkLnggPSBlLm1vdmVtZW50WVxuICAgICAgQG1vdXNlLnNwZWVkLnkgPSBlLm1vdmVtZW50WFxuXG4gICAgcmV0dXJuXG5cbiAgZXZlbnRNb3VzZVVwOiAoZSkgPT5cbiAgICBAbW91c2UuYWN0aXZlID0gZmFsc2VcblxuICAgIHJldHVyblxuXG4gIGVuZEtleVByZXNzOiAoZGlyZWN0aW9uKSA9PlxuICAgICMgSWYgd2UgYXJlbid0IHRyYWNraW5nIGl0XG4gICAgQGRpcmVjdGlvbnNbZGlyZWN0aW9uXSA9IGZhbHNlIGlmIEBkaXJlY3Rpb25zW2RpcmVjdGlvbl1cblxuICBiZWdpbktleVByZXNzOiAoZGlyZWN0aW9uKSA9PlxuICAgICMgSWYgd2UgYWxyZWFkeSBhcmUgbWFuYWdpbmcgdGhpcyBkaXJlY3Rpb25cbiAgICBpZiBAZGlyZWN0aW9uc1tkaXJlY3Rpb25dXG4gICAgICAjIFRoZW4ganVzdCByZXR1cm5cbiAgICAgIHJldHVyblxuXG4gICAgIyBPdGhlcndpc2Ugc2V0IGl0IHRvIHRydWVcbiAgICBAZGlyZWN0aW9uc1tkaXJlY3Rpb25dID0gdHJ1ZVxuXG4gICAgQHN0YXJ0UmVuZGVyKClcblxuICBnZXREaXJlY3Rpb246IChrZXkpID0+XG4gICAgc3dpdGNoIGtleVxuICAgICAgd2hlbiAzNywgNjUgdGhlbiBUaHJlZVNpeHR5OjpMRUZUXG4gICAgICB3aGVuIDM4LCA4NyB0aGVuIFRocmVlU2l4dHk6OlVQXG4gICAgICB3aGVuIDM5LCA2OCB0aGVuIFRocmVlU2l4dHk6OlJJR0hUXG4gICAgICB3aGVuIDQwLCA4MyB0aGVuIFRocmVlU2l4dHk6OkRPV05cbiAgICAgIGVsc2UgbnVsbFxuXG4gIG1vdmU6IChkaXJlY3Rpb24pID0+XG4gICAgc3dpdGNoIGRpcmVjdGlvblxuICAgICAgd2hlbiBUaHJlZVNpeHR5OjpMRUZUXG4gICAgICAgIEBjYW1lcmEucm90YXRpb24ueSA9IEBjYW1lcmEucm90YXRpb24ueSArIFRocmVlU2l4dHk6OkRpZWN0aW9uYWxJbmNyZW1lbnRcbiAgICAgIHdoZW4gVGhyZWVTaXh0eTo6VVBcbiAgICAgICAgQGNhbWVyYS5yb3RhdGlvbi54ID0gQGNhbWVyYS5yb3RhdGlvbi54ICsgVGhyZWVTaXh0eTo6RGllY3Rpb25hbEluY3JlbWVudFxuXG4gICAgICAgICMgT3ZlcmJvdW5kIGNvcnJlY3Rpb25zXG4gICAgICAgIEBib3VuZE1vdmVtZW50cygpXG4gICAgICB3aGVuIFRocmVlU2l4dHk6OlJJR0hUXG4gICAgICAgIEBjYW1lcmEucm90YXRpb24ueSA9IEBjYW1lcmEucm90YXRpb24ueSAtIFRocmVlU2l4dHk6OkRpZWN0aW9uYWxJbmNyZW1lbnRcbiAgICAgIHdoZW4gVGhyZWVTaXh0eTo6RE9XTlxuICAgICAgICBAY2FtZXJhLnJvdGF0aW9uLnggPSBAY2FtZXJhLnJvdGF0aW9uLnggLSBUaHJlZVNpeHR5OjpEaWVjdGlvbmFsSW5jcmVtZW50XG5cbiAgICAgICAgIyBPdmVyYm91bmQgY29ycmVjdGlvbnNcbiAgICAgICAgQGJvdW5kTW92ZW1lbnRzKClcblxuICAgIHJldHVyblxuXG4gIGJvdW5kTW92ZW1lbnRzOiA9PlxuICAgIGlmIEBjYW1lcmEucm90YXRpb24ueCA+IFRocmVlU2l4dHk6OlZlcnRpY2FsQW5nbGVDdXRPZmZcbiAgICAgIEBjYW1lcmEucm90YXRpb24ueCA9IFRocmVlU2l4dHk6OlZlcnRpY2FsQW5nbGVDdXRPZmZcbiAgICBlbHNlIGlmIEBjYW1lcmEucm90YXRpb24ueCA8IC1UaHJlZVNpeHR5OjpWZXJ0aWNhbEFuZ2xlQ3V0T2ZmXG4gICAgICBAY2FtZXJhLnJvdGF0aW9uLnggPSAtVGhyZWVTaXh0eTo6VmVydGljYWxBbmdsZUN1dE9mZlxuXG4gIHN0YXJ0UmVuZGVyOiA9PlxuICAgICMgSWYgaXQgaXMgbm90IHJlbmRlcmluZy4uLlxuICAgIGlmICFAaXNSZW5kZXJpbmdcblxuICAgICAgIyBUaGVuIG1hcmsgaXQgYXMgcmVuZGVyaW5nXG4gICAgICBAaXNSZW5kZXJpbmcgPSB0cnVlXG5cbiAgICAgICMgQW5kIHN0YXJ0IHRoZSByZW5kZXJcbiAgICAgIEByZW5kZXIoKVxuXG4gICAgcmV0dXJuXG5cbiAgcHJvY2Vzc01vdXNlTW92ZW1lbnRzOiAoKSA9PlxuICAgIEBjYW1lcmEucm90YXRpb24ueCArPSBAbW91c2Uuc3BlZWQueCAvIDQwMFxuICAgIEBjYW1lcmEucm90YXRpb24ueSArPSBAbW91c2Uuc3BlZWQueSAvIDQwMFxuXG4gICAgIyBTdG9wIGRyaWZ0XG4gICAgQG1vdXNlLnNwZWVkLnggKj0gVGhyZWVTaXh0eTo6RHJpZnRTbG93ZG93blJhdGVcbiAgICBAbW91c2Uuc3BlZWQueSAqPSBUaHJlZVNpeHR5OjpEcmlmdFNsb3dkb3duUmF0ZVxuICAgIGlmICFAbW91c2UuYWN0aXZlIGFuZCBNYXRoLmFicyhAbW91c2Uuc3BlZWQueCkgPCBUaHJlZVNpeHR5OjpkcmlmdFNwZWVkQ3V0b2ZmIGFuZCBNYXRoLmFicyhAbW91c2Uuc3BlZWQueSkgPCBUaHJlZVNpeHR5OjpkcmlmdFNwZWVkQ3V0b2ZmXG4gICAgICAjIFN0b3AgdGhlIG1vdmVtZW50XG4gICAgICBAbW91c2Uuc3BlZWQueCA9IDBcbiAgICAgIEBtb3VzZS5zcGVlZC55ID0gMFxuXG4gICAgICAjIFN0b3AgdGhlIHBhbm5pbmdcbiAgICAgIEBtb3VzZS5wYW5uaW5nID0gZmFsc2VcblxuICAgICMgT3ZlcmJvdW5kIGNvcnJlY3Rpb25zXG4gICAgQGJvdW5kTW92ZW1lbnRzKClcblxuICBwcm9jZXNzTW92ZW1lbnRzOiAoKSA9PlxuICAgIF8ubWFwIEBkaXJlY3Rpb25zLCAoZW5hYmxlZCwgZGlyZWN0aW9uKSA9PlxuICAgICAgQG1vdmUgZGlyZWN0aW9uIGlmIGVuYWJsZWRcblxuICAgIGlmIEBtb3VzZS5wYW5uaW5nXG4gICAgICBAcHJvY2Vzc01vdXNlTW92ZW1lbnRzKClcblxuICAgIHJldHVyblxuXG4gIHNob3VsZFJlcmVuZGVyOiAtPlxuICAgICMgSWYgdGhlcmUgYXJlIHNvbWUgZGlyZWN0aW9ucyBhY3RpdmUuLi5cbiAgICBAbW91c2UucGFubmluZyBvciBfLnNvbWUgQGRpcmVjdGlvbnNcblxuICBkb1JlbmRlcjogLT5cbiAgICAjIFByaW50IGRlYnVnXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlYnVnJykuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoQGNhbWVyYS5yb3RhdGlvbiwgbnVsbCwgMilcblxuICAgICMgUmVuZGVyIHRoZSBzY2VuZVxuICAgIEByZW5kZXJlci5yZW5kZXIgQHNjZW5lLCBAY2FtZXJhXG5cbiAgcmVuZGVyOiA9PlxuICAgIGlmIEBzaG91bGRSZXJlbmRlcigpXG4gICAgICAjIFJlcXVlc3QgdGhlIGFuaW1hdGlvbiB0byByZXBlYXQgb25jZSBtb3JlXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgVGhyZWVTaXh0eTo6cmVuZGVyLmJpbmQodGhpcylcblxuICAgICAgIyBQcm9jZXNzIGFsbCB0aGUgbW92ZW1lbnRzXG4gICAgICBAcHJvY2Vzc01vdmVtZW50cygpXG5cbiAgICAgICMgU3RhcnQgbWVhc3VyaW5nIHN0YXRzXG4gICAgICBAc3RhdHMuYmVnaW4oKVxuXG4gICAgICAjIERvIHRoZSByZW5kZXJcbiAgICAgIEBkb1JlbmRlcigpXG5cbiAgICAgIEBzdGF0cy5lbmQoKVxuXG4gICAgZWxzZVxuICAgICAgIyBGaW5pc2hlZCByZW5kZXJpbmdcbiAgICAgIEBpc1JlbmRlcmluZyA9IGZhbHNlXG5cbiAgICByZXR1cm5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAnRE9NQ29udGVudExvYWRlZCcsIC0+XG4gIHRzID0gbmV3IFRocmVlU2l4dHkgZG9jdW1lbnQuYm9keSwgW1xuICAgICdpbWFnZXMveW9rb2hhbWEvcG9zLXguanBnJyxcbiAgICAnaW1hZ2VzL3lva29oYW1hL25lZy14LmpwZycsXG4gICAgJ2ltYWdlcy95b2tvaGFtYS9wb3MteS5qcGcnLFxuICAgICdpbWFnZXMveW9rb2hhbWEvbmVnLXkuanBnJyxcbiAgICAnaW1hZ2VzL3lva29oYW1hL3Bvcy16LmpwZycsXG4gICAgJ2ltYWdlcy95b2tvaGFtYS9uZWctei5qcGcnXG4gIF1cblxuICB0cy5zdGFydCgpXG5cbiAgcmV0dXJuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=